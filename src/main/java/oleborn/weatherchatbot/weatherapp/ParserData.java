package oleborn.weatherchatbot.weatherapp;

import oleborn.weatherchatbot.weatherapp.dto.Weather;
import oleborn.weatherchatbot.weatherapp.dto.WeatherResponse;
import org.springframework.stereotype.Component;

import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.Stream;


@Component
public class ParserData {


    public String parseWeatherToMessage(String login, WeatherResponse weather) {
        return Stream.of(
                        formatHeader(login),
                        formatLocation(weather),
                        formatWeatherConditions(weather),
                        formatTemperature(weather),
                        formatWind(weather),
                        formatRain(weather),
                        formatVisibility(weather),
                        formatAstroData(weather),
                        formatFooter(weather)
                )
                .filter(Objects::nonNull)
                .collect(Collectors.joining("\n"));
    }

    private String formatHeader(String login) {
        return """
            <b>–û—Ç–≤–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É</b> %s:
            """.formatted(login);
    }

    private String formatLocation(WeatherResponse weather) {
        return """
            üåç <b><u>%s</u></b> (%s)
            üìç <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> %.4f¬∞N, %.4f¬∞E
            """.formatted(
                weather.name(),
                weather.sys().country(),
                weather.coord().lat(),
                weather.coord().lon()
        );
    }

    private String formatWeatherConditions(WeatherResponse weather) {
        Weather current = weather.weather().getFirst();
        return """
            %s <b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:</b>
            - %s
            """.formatted(
                getWeatherEmoji(current.id()),
                capitalizeFirstLetter(current.description())
        );
    }

    private String formatTemperature(WeatherResponse weather) {
        return """
            üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b>
            - –†–µ–∞–ª—å–Ω–∞—è: %.1f¬∞C
            - –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: %.1f¬∞C
            - –í–ª–∞–∂–Ω–æ—Å—Ç—å: %d%%
            - –î–∞–≤–ª–µ–Ω–∏–µ: %d –≥–ü–∞
            """.formatted(
                weather.main().temp(),
                weather.main().feels_like(),
                weather.main().humidity(),
                weather.main().pressure()
        );
    }

    private String formatWind(WeatherResponse weather) {
        return """
            üå¨ <b>–í–µ—Ç–µ—Ä:</b>
            - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: %s
            - –°–∫–æ—Ä–æ—Å—Ç—å: %.1f –º/—Å
            %s""".formatted(
                getWindDirection(weather.wind().deg()),
                weather.wind().speed(),
                weather.wind().gust() > 0
                        ? "- –ü–æ—Ä—ã–≤—ã –¥–æ: %.1f –º/—Å".formatted(weather.wind().gust())
                        : ""
        );
    }

    private String formatRain(WeatherResponse weather) {
        if (weather.rain() == null) return null;

        return """
            üåß <b>–û—Å–∞–¥–∫–∏:</b>
            - –î–æ–∂–¥—å: %.1f –º–º
            """.formatted(weather.rain().oneHour());
    }

    private String formatVisibility(WeatherResponse weather) {
        return """
            \n<b>–í–∏–¥–∏–º–æ—Å—Ç—å:</b> %d –∫–º
            ‚òÅ <b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> %d%%
            """.formatted(
                weather.visibility() / 1000,
                weather.clouds().all()
        );
    }

    private String formatAstroData(WeatherResponse weather) {
        return """
            üåû <b>–°–æ–ª–Ω—Ü–µ:</b>
            - –í–æ—Å—Ö–æ–¥: %s
            - –ó–∞–∫–∞—Ç: %s
            """.formatted(
                formatUnixTime(weather.sys().sunrise(), weather.timezone()),
                formatUnixTime(weather.sys().sunset(), weather.timezone())
        );
    }

    private String formatFooter(WeatherResponse weather) {
        return """
            ‚Ñπ <b>–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞:</b> %s
            """.formatted(
                formatUnixTime(weather.dt(), weather.timezone())
        );
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private String capitalizeFirstLetter(String input) {
        if (input == null || input.isEmpty()) return input;
        return input.substring(0, 1).toUpperCase() + input.substring(1);
    }

    private String formatUnixTime(long timestamp, int timezoneOffset) {
        Instant instant = Instant.ofEpochSecond(timestamp + timezoneOffset);
        return instant.atZone(ZoneId.of("UTC")).format(DateTimeFormatter.ofPattern("HH:mm"));
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
    private String getWindDirection(int degrees) {
        String[] directions = {"–°–µ–≤–µ—Ä–Ω—ã–π", "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π", "–í–æ—Å—Ç–æ—á–Ω—ã–π", "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π", "–Æ–∂–Ω—ã–π", "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–π", "–ó–∞–ø–∞–¥–Ω—ã–π", "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π"};
        return directions[(int) Math.round(((degrees % 360) / 45.0)) % 8];
    }

    // –ü–æ–¥–±–æ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã
    private String getWeatherEmoji(int weatherId) {
        return switch (weatherId / 100) {
            case 2 -> "‚õà";
            case 3, 5 -> "üåß";
            case 6 -> "‚ùÑÔ∏è";
            case 7 -> "üå´";
            case 8 -> weatherId == 800 ? "‚òÄÔ∏è" : "‚òÅÔ∏è";
            default -> "üå§";
        };
    }
}
